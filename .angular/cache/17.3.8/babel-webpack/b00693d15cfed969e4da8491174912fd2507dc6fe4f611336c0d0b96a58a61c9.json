{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"colorWheelCanvas\"];\nexport let ColorPickerComponent = /*#__PURE__*/(() => {\n  class ColorPickerComponent {\n    constructor() {\n      this.colorSelected = new EventEmitter(); // Output event to emit the selected color\n    }\n    ngAfterViewInit() {\n      this.ctx = this.canvas.nativeElement.getContext('2d');\n      this.drawColorWheel();\n      this.canvas.nativeElement.addEventListener('click', this.pickColor.bind(this));\n    }\n    drawColorWheel() {\n      const canvas = this.canvas.nativeElement;\n      const ctx = this.ctx;\n      const radius = canvas.width / 2;\n      const imageData = ctx.createImageData(canvas.width, canvas.height);\n      for (let x = 0; x < canvas.width; x++) {\n        for (let y = 0; y < canvas.height; y++) {\n          const dx = x - radius;\n          const dy = y - radius;\n          const distance = Math.sqrt(dx * dx + dy * dy);\n          if (distance <= radius) {\n            const angle = Math.atan2(dy, dx) + Math.PI;\n            const hue = angle * (180 / Math.PI);\n            const saturation = distance / radius;\n            const [r, g, b] = this.hsvToRgb(hue, saturation, 1);\n            const index = (y * canvas.width + x) * 4;\n            imageData.data[index] = r;\n            imageData.data[index + 1] = g;\n            imageData.data[index + 2] = b;\n            imageData.data[index + 3] = 255;\n          }\n        }\n      }\n      ctx.putImageData(imageData, 0, 0);\n    }\n    pickColor(event) {\n      const canvas = this.canvas.nativeElement;\n      const rect = canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      const imageData = this.ctx.getImageData(x, y, 1, 1).data;\n      const [r, g, b] = [imageData[0], imageData[1], imageData[2]];\n      const hexColor = this.rgbToHex(r, g, b);\n      console.log(`Selected color: ${hexColor}`);\n      this.colorSelected.emit(hexColor); // Emit the selected color in hex format\n    }\n    hsvToRgb(h, s, v) {\n      const c = v * s;\n      const x = c * (1 - Math.abs(h / 60 % 2 - 1));\n      const m = v - c;\n      let [r, g, b] = [0, 0, 0];\n      if (h >= 0 && h < 60) {\n        [r, g, b] = [c, x, 0];\n      } else if (h >= 60 && h < 120) {\n        [r, g, b] = [x, c, 0];\n      } else if (h >= 120 && h < 180) {\n        [r, g, b] = [0, c, x];\n      } else if (h >= 180 && h < 240) {\n        [r, g, b] = [0, x, c];\n      } else if (h >= 240 && h < 300) {\n        [r, g, b] = [x, 0, c];\n      } else if (h >= 300 && h < 360) {\n        [r, g, b] = [c, 0, x];\n      }\n      return [Math.round((r + m) * 255), Math.round((g + m) * 255), Math.round((b + m) * 255)];\n    }\n    rgbToHex(r, g, b) {\n      return `#${this.toHex(r)}${this.toHex(g)}${this.toHex(b)}`;\n    }\n    toHex(value) {\n      return value.toString(16).padStart(2, '0');\n    }\n    static #_ = this.ɵfac = function ColorPickerComponent_Factory(t) {\n      return new (t || ColorPickerComponent)();\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ColorPickerComponent,\n      selectors: [[\"app-color-picker\"]],\n      viewQuery: function ColorPickerComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.canvas = _t.first);\n        }\n      },\n      outputs: {\n        colorSelected: \"colorSelected\"\n      },\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 3,\n      vars: 0,\n      consts: [[\"colorWheelCanvas\", \"\"], [1, \"color-wheel-container\"], [\"width\", \"300\", \"height\", \"300\"]],\n      template: function ColorPickerComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 1);\n          i0.ɵɵelement(1, \"canvas\", 2, 0);\n          i0.ɵɵelementEnd();\n        }\n      },\n      dependencies: [CommonModule, FormsModule],\n      styles: [\".color-wheel-container[_ngcontent-%COMP%]{display:flex;justify-content:center;align-items:center;position:relative}canvas[_ngcontent-%COMP%]{border-radius:50%;cursor:crosshair}\"]\n    });\n  }\n  return ColorPickerComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}