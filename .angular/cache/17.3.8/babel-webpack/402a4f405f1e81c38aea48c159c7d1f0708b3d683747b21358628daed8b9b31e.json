{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, forwardRef, NgModule } from '@angular/core';\nimport * as i2 from 'ngx-color';\nimport { isValidHex, ColorWrap, AlphaModule, CheckboardModule, EditableInputModule, HueModule, SaturationModule, SwatchModule } from 'ngx-color';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nconst _c0 = (a0, a1) => ({\n  input: a0,\n  label: a1\n});\nfunction SketchFieldsComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"color-editable-input\", 9);\n    i0.ɵɵlistener(\"onChange\", function SketchFieldsComponent_div_9_Template_color_editable_input_onChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.handleChange($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵstyleMap(i0.ɵɵpureFunction2(5, _c0, ctx_r1.input, ctx_r1.label));\n    i0.ɵɵproperty(\"value\", ctx_r1.round(ctx_r1.rgb.a * 100))(\"dragLabel\", true)(\"dragMax\", 100);\n  }\n}\nfunction SketchPresetColorsComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"color-swatch\", 3);\n    i0.ɵɵlistener(\"onClick\", function SketchPresetColorsComponent_div_1_Template_color_swatch_onClick_1_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.handleClick($event));\n    })(\"onHover\", function SketchPresetColorsComponent_div_1_Template_color_swatch_onHover_1_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onSwatchHover.emit($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const c_r3 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵstyleMap(ctx_r1.swatchStyle);\n    i0.ɵɵproperty(\"color\", ctx_r1.normalizeValue(c_r3).color)(\"focusStyle\", ctx_r1.focusStyle(c_r3));\n  }\n}\nfunction SketchComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"color-alpha\", 13);\n    i0.ɵɵlistener(\"onChange\", function SketchComponent_div_7_Template_color_alpha_onChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.handleValueChange($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"radius\", 2)(\"rgb\", ctx_r1.rgb)(\"hsl\", ctx_r1.hsl);\n  }\n}\nfunction SketchComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 14)(1, \"color-sketch-preset-colors\", 15);\n    i0.ɵɵlistener(\"onClick\", function SketchComponent_div_13_Template_color_sketch_preset_colors_onClick_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.handleBlockChange($event));\n    })(\"onSwatchHover\", function SketchComponent_div_13_Template_color_sketch_preset_colors_onSwatchHover_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onSwatchHover.emit($event));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"colors\", ctx_r1.presetColors);\n  }\n}\nlet SketchFieldsComponent = /*#__PURE__*/(() => {\n  class SketchFieldsComponent {\n    hsl;\n    rgb;\n    hex;\n    disableAlpha = false;\n    onChange = new EventEmitter();\n    input = {\n      width: '100%',\n      padding: '4px 10% 3px',\n      border: 'none',\n      boxSizing: 'border-box',\n      boxShadow: 'inset 0 0 0 1px #ccc',\n      fontSize: '11px'\n    };\n    label = {\n      display: 'block',\n      textAlign: 'center',\n      fontSize: '11px',\n      color: '#222',\n      paddingTop: '3px',\n      paddingBottom: '4px',\n      textTransform: 'capitalize'\n    };\n    round(value) {\n      return Math.round(value);\n    }\n    handleChange({\n      data,\n      $event\n    }) {\n      if (data.hex) {\n        if (isValidHex(data.hex)) {\n          const color = new TinyColor(data.hex);\n          this.onChange.emit({\n            data: {\n              hex: this.disableAlpha || data.hex.length <= 6 ? color.toHex() : color.toHex8(),\n              source: 'hex'\n            },\n            $event\n          });\n        }\n      } else if (data.r || data.g || data.b) {\n        this.onChange.emit({\n          data: {\n            r: data.r || this.rgb.r,\n            g: data.g || this.rgb.g,\n            b: data.b || this.rgb.b,\n            source: 'rgb'\n          },\n          $event\n        });\n      } else if (data.a) {\n        if (data.a < 0) {\n          data.a = 0;\n        } else if (data.a > 100) {\n          data.a = 100;\n        }\n        data.a /= 100;\n        if (this.disableAlpha) {\n          data.a = 1;\n        }\n        this.onChange.emit({\n          data: {\n            h: this.hsl.h,\n            s: this.hsl.s,\n            l: this.hsl.l,\n            a: Math.round(data.a * 100) / 100,\n            source: 'rgb'\n          },\n          $event\n        });\n      } else if (data.h || data.s || data.l) {\n        this.onChange.emit({\n          data: {\n            h: data.h || this.hsl.h,\n            s: Number(data.s && data.s || this.hsl.s),\n            l: Number(data.l && data.l || this.hsl.l),\n            source: 'hsl'\n          },\n          $event\n        });\n      }\n    }\n    static ɵfac = function SketchFieldsComponent_Factory(t) {\n      return new (t || SketchFieldsComponent)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: SketchFieldsComponent,\n      selectors: [[\"color-sketch-fields\"]],\n      inputs: {\n        hsl: \"hsl\",\n        rgb: \"rgb\",\n        hex: \"hex\",\n        disableAlpha: \"disableAlpha\"\n      },\n      outputs: {\n        onChange: \"onChange\"\n      },\n      decls: 10,\n      vars: 31,\n      consts: [[1, \"sketch-fields\"], [1, \"sketch-double\"], [\"label\", \"hex\", 3, \"onChange\", \"value\"], [1, \"sketch-single\"], [\"label\", \"r\", 3, \"onChange\", \"value\", \"dragLabel\", \"dragMax\"], [\"label\", \"g\", 3, \"onChange\", \"value\", \"dragLabel\", \"dragMax\"], [\"label\", \"b\", 3, \"onChange\", \"value\", \"dragLabel\", \"dragMax\"], [\"class\", \"sketch-alpha\", 4, \"ngIf\"], [1, \"sketch-alpha\"], [\"label\", \"a\", 3, \"onChange\", \"value\", \"dragLabel\", \"dragMax\"]],\n      template: function SketchFieldsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"color-editable-input\", 2);\n          i0.ɵɵlistener(\"onChange\", function SketchFieldsComponent_Template_color_editable_input_onChange_2_listener($event) {\n            return ctx.handleChange($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(3, \"div\", 3)(4, \"color-editable-input\", 4);\n          i0.ɵɵlistener(\"onChange\", function SketchFieldsComponent_Template_color_editable_input_onChange_4_listener($event) {\n            return ctx.handleChange($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(5, \"div\", 3)(6, \"color-editable-input\", 5);\n          i0.ɵɵlistener(\"onChange\", function SketchFieldsComponent_Template_color_editable_input_onChange_6_listener($event) {\n            return ctx.handleChange($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"div\", 3)(8, \"color-editable-input\", 6);\n          i0.ɵɵlistener(\"onChange\", function SketchFieldsComponent_Template_color_editable_input_onChange_8_listener($event) {\n            return ctx.handleChange($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(9, SketchFieldsComponent_div_9_Template, 2, 8, \"div\", 7);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction2(19, _c0, ctx.input, ctx.label));\n          i0.ɵɵproperty(\"value\", ctx.hex.replace(\"#\", \"\"));\n          i0.ɵɵadvance(2);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction2(22, _c0, ctx.input, ctx.label));\n          i0.ɵɵproperty(\"value\", ctx.rgb.r)(\"dragLabel\", true)(\"dragMax\", 255);\n          i0.ɵɵadvance(2);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction2(25, _c0, ctx.input, ctx.label));\n          i0.ɵɵproperty(\"value\", ctx.rgb.g)(\"dragLabel\", true)(\"dragMax\", 255);\n          i0.ɵɵadvance(2);\n          i0.ɵɵstyleMap(i0.ɵɵpureFunction2(28, _c0, ctx.input, ctx.label));\n          i0.ɵɵproperty(\"value\", ctx.rgb.b)(\"dragLabel\", true)(\"dragMax\", 255);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.disableAlpha === false);\n        }\n      },\n      dependencies: [i1.NgIf, i2.EditableInputComponent],\n      styles: [\".sketch-fields[_ngcontent-%COMP%]{display:flex;padding-top:4px}.sketch-double[_ngcontent-%COMP%]{flex:2 1 0%}.sketch-single[_ngcontent-%COMP%], .sketch-alpha[_ngcontent-%COMP%]{flex:1 1 0%;padding-left:6px}[dir=rtl][_nghost-%COMP%]   .sketch-single[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .sketch-single[_ngcontent-%COMP%]{padding-right:6px;padding-left:0}[dir=rtl][_nghost-%COMP%]   .sketch-alpha[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .sketch-alpha[_ngcontent-%COMP%]{padding-right:6px;padding-left:0}\"],\n      changeDetection: 0\n    });\n  }\n  return SketchFieldsComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SketchPresetColorsComponent = /*#__PURE__*/(() => {\n  class SketchPresetColorsComponent {\n    colors;\n    onClick = new EventEmitter();\n    onSwatchHover = new EventEmitter();\n    swatchStyle = {\n      borderRadius: '3px',\n      boxShadow: 'inset 0 0 0 1px rgba(0,0,0,.15)'\n    };\n    handleClick({\n      hex,\n      $event\n    }) {\n      this.onClick.emit({\n        hex,\n        $event\n      });\n    }\n    normalizeValue(val) {\n      if (typeof val === 'string') {\n        return {\n          color: val\n        };\n      }\n      return val;\n    }\n    focusStyle(val) {\n      const c = this.normalizeValue(val);\n      return {\n        boxShadow: `inset 0 0 0 1px rgba(0,0,0,.15), 0 0 4px ${c.color}`\n      };\n    }\n    static ɵfac = function SketchPresetColorsComponent_Factory(t) {\n      return new (t || SketchPresetColorsComponent)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: SketchPresetColorsComponent,\n      selectors: [[\"color-sketch-preset-colors\"]],\n      inputs: {\n        colors: \"colors\"\n      },\n      outputs: {\n        onClick: \"onClick\",\n        onSwatchHover: \"onSwatchHover\"\n      },\n      decls: 2,\n      vars: 1,\n      consts: [[1, \"sketch-swatches\"], [\"class\", \"sketch-wrap\", 4, \"ngFor\", \"ngForOf\"], [1, \"sketch-wrap\"], [1, \"swatch\", 3, \"onClick\", \"onHover\", \"color\", \"focusStyle\"]],\n      template: function SketchPresetColorsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵtemplate(1, SketchPresetColorsComponent_div_1_Template, 2, 4, \"div\", 1);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngForOf\", ctx.colors);\n        }\n      },\n      dependencies: [i1.NgForOf, i2.SwatchComponent],\n      styles: [\".sketch-swatches[_ngcontent-%COMP%]{position:relative;display:flex;flex-wrap:wrap;margin:0 -10px;padding:10px 0 0 10px;border-top:1px solid rgb(238,238,238)}.sketch-wrap[_ngcontent-%COMP%]{width:16px;height:16px;margin:0 10px 10px 0}[dir=rtl][_nghost-%COMP%]   .sketch-swatches[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .sketch-swatches[_ngcontent-%COMP%]{padding-right:10px;padding-left:0}[dir=rtl][_nghost-%COMP%]   .sketch-wrap[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .sketch-wrap[_ngcontent-%COMP%]{margin-left:10px;margin-right:0}\"],\n      changeDetection: 0\n    });\n  }\n  return SketchPresetColorsComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SketchComponent = /*#__PURE__*/(() => {\n  class SketchComponent extends ColorWrap {\n    /** Remove alpha slider and options from picker */\n    disableAlpha = false;\n    /** Hex strings for default colors at bottom of picker */\n    presetColors = ['#D0021B', '#F5A623', '#F8E71C', '#8B572A', '#7ED321', '#417505', '#BD10E0', '#9013FE', '#4A90E2', '#50E3C2', '#B8E986', '#000000', '#4A4A4A', '#9B9B9B', '#FFFFFF'];\n    /** Width of picker */\n    width = 200;\n    activeBackground;\n    constructor() {\n      super();\n    }\n    afterValidChange() {\n      const alpha = this.disableAlpha ? 1 : this.rgb.a;\n      this.activeBackground = `rgba(${this.rgb.r}, ${this.rgb.g}, ${this.rgb.b}, ${alpha})`;\n    }\n    handleValueChange({\n      data,\n      $event\n    }) {\n      this.handleChange(data, $event);\n    }\n    handleBlockChange({\n      hex,\n      $event\n    }) {\n      if (isValidHex(hex)) {\n        // this.hex = hex;\n        this.handleChange({\n          hex,\n          source: 'hex'\n        }, $event);\n      }\n    }\n    static ɵfac = function SketchComponent_Factory(t) {\n      return new (t || SketchComponent)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: SketchComponent,\n      selectors: [[\"color-sketch\"]],\n      inputs: {\n        disableAlpha: \"disableAlpha\",\n        presetColors: \"presetColors\",\n        width: \"width\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(() => SketchComponent),\n        multi: true\n      }, {\n        provide: ColorWrap,\n        useExisting: forwardRef(() => SketchComponent)\n      }]), i0.ɵɵInheritDefinitionFeature],\n      decls: 14,\n      vars: 16,\n      consts: [[1, \"sketch-saturation\"], [3, \"onChange\", \"hsl\", \"hsv\"], [1, \"sketch-controls\"], [1, \"sketch-sliders\"], [1, \"sketch-hue\"], [3, \"onChange\", \"hsl\"], [\"class\", \"sketch-alpha\", 4, \"ngIf\"], [1, \"sketch-color\"], [1, \"sketch-active\"], [1, \"sketch-fields-container\"], [3, \"onChange\", \"rgb\", \"hsl\", \"hex\", \"disableAlpha\"], [\"class\", \"sketch-swatches-container\", 4, \"ngIf\"], [1, \"sketch-alpha\"], [3, \"onChange\", \"radius\", \"rgb\", \"hsl\"], [1, \"sketch-swatches-container\"], [3, \"onClick\", \"onSwatchHover\", \"colors\"]],\n      template: function SketchComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\")(1, \"div\", 0)(2, \"color-saturation\", 1);\n          i0.ɵɵlistener(\"onChange\", function SketchComponent_Template_color_saturation_onChange_2_listener($event) {\n            return ctx.handleValueChange($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(3, \"div\", 2)(4, \"div\", 3)(5, \"div\", 4)(6, \"color-hue\", 5);\n          i0.ɵɵlistener(\"onChange\", function SketchComponent_Template_color_hue_onChange_6_listener($event) {\n            return ctx.handleValueChange($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(7, SketchComponent_div_7_Template, 2, 3, \"div\", 6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"div\", 7);\n          i0.ɵɵelement(9, \"color-checkboard\")(10, \"div\", 8);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(11, \"div\", 9)(12, \"color-sketch-fields\", 10);\n          i0.ɵɵlistener(\"onChange\", function SketchComponent_Template_color_sketch_fields_onChange_12_listener($event) {\n            return ctx.handleValueChange($event);\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(13, SketchComponent_div_13_Template, 2, 1, \"div\", 11);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵclassMapInterpolate1(\"sketch-picker \", ctx.className, \"\");\n          i0.ɵɵstyleProp(\"width\", ctx.width, \"px\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"hsl\", ctx.hsl)(\"hsv\", ctx.hsv);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"hsl\", ctx.hsl);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.disableAlpha === false);\n          i0.ɵɵadvance(3);\n          i0.ɵɵstyleProp(\"background\", ctx.activeBackground);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"rgb\", ctx.rgb)(\"hsl\", ctx.hsl)(\"hex\", ctx.hex)(\"disableAlpha\", ctx.disableAlpha);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.presetColors && ctx.presetColors.length);\n        }\n      },\n      dependencies: () => [i1.NgIf, i2.AlphaComponent, i2.CheckboardComponent, i2.HueComponent, i2.SaturationComponent, SketchFieldsComponent, SketchPresetColorsComponent],\n      styles: [\".sketch-picker[_ngcontent-%COMP%]{padding:10px 10px 3px;box-sizing:initial;background:#fff;border-radius:4px;box-shadow:0 0 0 1px #00000026,0 8px 16px #00000026}.sketch-saturation[_ngcontent-%COMP%]{width:100%;padding-bottom:75%;position:relative;overflow:hidden}.sketch-fields-container[_ngcontent-%COMP%], .sketch-swatches-container[_ngcontent-%COMP%]{display:block}.sketch-controls[_ngcontent-%COMP%]{display:flex}.sketch-sliders[_ngcontent-%COMP%]{padding:4px 0;flex:1 1 0%}.sketch-hue[_ngcontent-%COMP%]{position:relative;height:10px;overflow:hidden}.sketch-alpha[_ngcontent-%COMP%]{position:relative;height:10px;margin-top:4px;overflow:hidden}.sketch-color[_ngcontent-%COMP%]{width:24px;height:24px;position:relative;margin-top:4px;margin-left:4px;border-radius:3px}.sketch-active[_ngcontent-%COMP%]{position:absolute;inset:0;border-radius:2px;box-shadow:#00000026 0 0 0 1px inset,#00000040 0 0 4px inset}[dir=rtl][_nghost-%COMP%]   .sketch-color[_ngcontent-%COMP%], [dir=rtl]   [_nghost-%COMP%]   .sketch-color[_ngcontent-%COMP%]{margin-right:4px;margin-left:0}\"],\n      changeDetection: 0\n    });\n  }\n  return SketchComponent;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet ColorSketchModule = /*#__PURE__*/(() => {\n  class ColorSketchModule {\n    static ɵfac = function ColorSketchModule_Factory(t) {\n      return new (t || ColorSketchModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: ColorSketchModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule, AlphaModule, CheckboardModule, EditableInputModule, HueModule, SaturationModule, SwatchModule]\n    });\n  }\n  return ColorSketchModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ColorSketchModule, SketchComponent, SketchFieldsComponent, SketchPresetColorsComponent };\n//# sourceMappingURL=ngx-color-sketch.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}