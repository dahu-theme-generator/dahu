{"ast":null,"code":"import _asyncToGenerator from \"/home/andojas/Documents/dahu/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport AxiosError from \"../core/AxiosError.js\";\nimport composeSignals from \"../helpers/composeSignals.js\";\nimport { trackStream } from \"../helpers/trackStream.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport progressEventReducer from \"../helpers/progressEventReducer.js\";\nimport resolveConfig from \"../helpers/resolveConfig.js\";\nimport settle from \"../core/settle.js\";\nconst fetchProgressDecorator = (total, fn) => {\n  const lengthComputable = total != null;\n  return loaded => setTimeout(() => fn({\n    lengthComputable,\n    total,\n    loaded\n  }));\n};\nconst isFetchSupported = typeof fetch === 'function' && typeof Request === 'function' && typeof Response === 'function';\nconst isReadableStreamSupported = isFetchSupported && typeof ReadableStream === 'function';\n\n// used only inside the fetch adapter\nconst encodeText = isFetchSupported && (typeof TextEncoder === 'function' ? (encoder => str => encoder.encode(str))(new TextEncoder()) : ( /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (str) {\n    return new Uint8Array(yield new Response(str).arrayBuffer());\n  });\n  return function (_x) {\n    return _ref.apply(this, arguments);\n  };\n}()));\nconst supportsRequestStream = isReadableStreamSupported && (() => {\n  let duplexAccessed = false;\n  const hasContentType = new Request(platform.origin, {\n    body: new ReadableStream(),\n    method: 'POST',\n    get duplex() {\n      duplexAccessed = true;\n      return 'half';\n    }\n  }).headers.has('Content-Type');\n  return duplexAccessed && !hasContentType;\n})();\nconst DEFAULT_CHUNK_SIZE = 64 * 1024;\nconst supportsResponseStream = isReadableStreamSupported && !!(() => {\n  try {\n    return utils.isReadableStream(new Response('').body);\n  } catch (err) {\n    // return undefined\n  }\n})();\nconst resolvers = {\n  stream: supportsResponseStream && (res => res.body)\n};\nisFetchSupported && (res => {\n  ['text', 'arrayBuffer', 'blob', 'formData', 'stream'].forEach(type => {\n    !resolvers[type] && (resolvers[type] = utils.isFunction(res[type]) ? res => res[type]() : (_, config) => {\n      throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);\n    });\n  });\n})(new Response());\nconst getBodyLength = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (body) {\n    if (body == null) {\n      return 0;\n    }\n    if (utils.isBlob(body)) {\n      return body.size;\n    }\n    if (utils.isSpecCompliantForm(body)) {\n      return (yield new Request(body).arrayBuffer()).byteLength;\n    }\n    if (utils.isArrayBufferView(body)) {\n      return body.byteLength;\n    }\n    if (utils.isURLSearchParams(body)) {\n      body = body + '';\n    }\n    if (utils.isString(body)) {\n      return (yield encodeText(body)).byteLength;\n    }\n  });\n  return function getBodyLength(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nconst resolveBodyLength = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator(function* (headers, body) {\n    const length = utils.toFiniteNumber(headers.getContentLength());\n    return length == null ? getBodyLength(body) : length;\n  });\n  return function resolveBodyLength(_x3, _x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport default isFetchSupported && ( /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator(function* (config) {\n    let {\n      url,\n      method,\n      data,\n      signal,\n      cancelToken,\n      timeout,\n      onDownloadProgress,\n      onUploadProgress,\n      responseType,\n      headers,\n      withCredentials = 'same-origin',\n      fetchOptions\n    } = resolveConfig(config);\n    responseType = responseType ? (responseType + '').toLowerCase() : 'text';\n    let [composedSignal, stopTimeout] = signal || cancelToken || timeout ? composeSignals([signal, cancelToken], timeout) : [];\n    let finished, request;\n    const onFinish = () => {\n      !finished && setTimeout(() => {\n        composedSignal && composedSignal.unsubscribe();\n      });\n      finished = true;\n    };\n    let requestContentLength;\n    try {\n      if (onUploadProgress && supportsRequestStream && method !== 'get' && method !== 'head' && (requestContentLength = yield resolveBodyLength(headers, data)) !== 0) {\n        let _request = new Request(url, {\n          method: 'POST',\n          body: data,\n          duplex: \"half\"\n        });\n        let contentTypeHeader;\n        if (utils.isFormData(data) && (contentTypeHeader = _request.headers.get('content-type'))) {\n          headers.setContentType(contentTypeHeader);\n        }\n        if (_request.body) {\n          data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, fetchProgressDecorator(requestContentLength, progressEventReducer(onUploadProgress)), null, encodeText);\n        }\n      }\n      if (!utils.isString(withCredentials)) {\n        withCredentials = withCredentials ? 'cors' : 'omit';\n      }\n      request = new Request(url, {\n        ...fetchOptions,\n        signal: composedSignal,\n        method: method.toUpperCase(),\n        headers: headers.normalize().toJSON(),\n        body: data,\n        duplex: \"half\",\n        withCredentials\n      });\n      let response = yield fetch(request);\n      const isStreamResponse = supportsResponseStream && (responseType === 'stream' || responseType === 'response');\n      if (supportsResponseStream && (onDownloadProgress || isStreamResponse)) {\n        const options = {};\n        ['status', 'statusText', 'headers'].forEach(prop => {\n          options[prop] = response[prop];\n        });\n        const responseContentLength = utils.toFiniteNumber(response.headers.get('content-length'));\n        response = new Response(trackStream(response.body, DEFAULT_CHUNK_SIZE, onDownloadProgress && fetchProgressDecorator(responseContentLength, progressEventReducer(onDownloadProgress, true)), isStreamResponse && onFinish, encodeText), options);\n      }\n      responseType = responseType || 'text';\n      let responseData = yield resolvers[utils.findKey(resolvers, responseType) || 'text'](response, config);\n      !isStreamResponse && onFinish();\n      stopTimeout && stopTimeout();\n      return yield new Promise((resolve, reject) => {\n        settle(resolve, reject, {\n          data: responseData,\n          headers: AxiosHeaders.from(response.headers),\n          status: response.status,\n          statusText: response.statusText,\n          config,\n          request\n        });\n      });\n    } catch (err) {\n      onFinish();\n      if (err && err.name === 'TypeError' && /fetch/i.test(err.message)) {\n        throw Object.assign(new AxiosError('Network Error', AxiosError.ERR_NETWORK, config, request), {\n          cause: err.cause || err\n        });\n      }\n      throw AxiosError.from(err, err && err.code, config, request);\n    }\n  });\n  return function (_x5) {\n    return _ref4.apply(this, arguments);\n  };\n}());","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}