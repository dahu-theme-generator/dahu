{"ast":null,"code":"import * as fs from 'fs';\nimport * as path from 'path';\nimport * as vscode from 'vscode';\nimport { globalExtensionPath } from \"./extension\";\n// let db = initDB();\n// TODO: color change below\n// editor background\n// sidebar background\n// panel background\n// status bar background\n// tabs background\n// ...\nfunction applyPreset(preset) {\n  const themePath = path.join(globalExtensionPath, 'themes', 'extensionTheme.json');\n  try {\n    const themeData = JSON.parse(fs.readFileSync(themePath, 'utf-8'));\n    themeData.colors['editor.background'] = preset.editorColor;\n    themeData.colors['sideBar.background'] = preset.sidebarColor;\n    themeData.colors['panel.background'] = preset.panelColor;\n    themeData.colors['statusBar.background'] = preset.statusBarColor;\n    themeData.colors['editorGroupHeader.tabsBackground'] = preset.tabsColor;\n    let syntaxScopes = JSON.parse(preset.tokenColors);\n    const scopesInJSON = syntaxScopes.map(scope => JSON.stringify(scope));\n    themeData.tokenColors = scopesInJSON;\n  } catch (error) {\n    console.log('error while applying preset: ' + error.message);\n  }\n}\nfunction changeEditor(color, context) {\n  const config = vscode.workspace.getConfiguration();\n  // const currentTheme = config.get<string>('workbench.colorTheme');\n  const themePath = path.join(context.extensionPath, 'themes', 'extensiontheme.json');\n  try {\n    const themeData = JSON.parse(fs.readFileSync(themePath, 'utf-8'));\n    themeData.colors['editor.background'] = color;\n    fs.writeFileSync(themePath, JSON.stringify(themeData, null, 2), 'utf-8');\n  } catch (err) {\n    console.log('error while setting editor background: ' + err.message);\n  }\n}\nfunction changeSidebar(color, context) {\n  const themePath = path.join(context.extensionPath, 'themes', 'extensiontheme.json');\n  try {\n    const themeData = JSON.parse(fs.readFileSync(themePath, 'utf-8'));\n    themeData.colors['sideBar.background'] = color;\n    fs.writeFileSync(themePath, JSON.stringify(themeData, null, 2), 'utf-8');\n  } catch (err) {\n    console.log('error while setting side bar background: ' + err.message);\n  }\n}\nfunction changePanel(color, context) {\n  const themePath = path.join(context.extensionPath, 'themes', 'extensiontheme.json');\n  try {\n    const themeData = JSON.parse(fs.readFileSync(themePath, 'utf-8'));\n    themeData.colors['panel.background'] = color;\n    fs.writeFileSync(themePath, JSON.stringify(themeData, null, 2), 'utf-8');\n  } catch (err) {\n    console.log('error while setting panel background: ' + err.message);\n  }\n}\nfunction changeStatusBar(color, context) {\n  const themePath = path.join(context.extensionPath, 'themes', 'extensiontheme.json');\n  try {\n    const themeData = JSON.parse(fs.readFileSync(themePath, 'utf-8'));\n    themeData.colors['statusBar.background'] = color;\n    fs.writeFileSync(themePath, JSON.stringify(themeData, null, 2), 'utf-8');\n  } catch (err) {\n    console.log('error while setting status bar background: ' + err.message);\n  }\n}\nfunction changeTabs(color, context) {\n  const themePath = path.join(context.extensionPath, 'themes', 'extensiontheme.json');\n  try {\n    const themeData = JSON.parse(fs.readFileSync(themePath, 'utf-8'));\n    themeData.colors['editorGroupHeader.background'] = color;\n    fs.writeFileSync(themePath, JSON.stringify(themeData, null, 2), 'utf-8');\n  } catch (err) {\n    console.log('error while setting status bar background: ' + err.message);\n  }\n}\nexport { changeEditor, changeSidebar, changePanel, changeStatusBar, changeTabs, applyPreset };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}