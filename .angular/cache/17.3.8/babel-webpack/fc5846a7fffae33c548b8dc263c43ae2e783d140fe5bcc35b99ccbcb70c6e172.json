{"ast":null,"code":"import { ColorSketchModule } from 'ngx-color/sketch';\nimport { CommonModule } from '@angular/common';\nimport { ColorPickerComponent } from '../color-picker/color-picker.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction GenerateColorSchemeComponent_app_color_picker_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-color-picker\", 5);\n    i0.ɵɵlistener(\"colorChange\", function GenerateColorSchemeComponent_app_color_picker_7_Template_app_color_picker_colorChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onColorPickerChange($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"selectedColor\", ctx_r1.currentColor);\n  }\n}\nexport let GenerateColorSchemeComponent = /*#__PURE__*/(() => {\n  class GenerateColorSchemeComponent {\n    constructor() {\n      this.showColorPicker = false;\n      this.currentColor = '#ff0000'; // Initial color\n    }\n    openColorPicker() {\n      this.showColorPicker = true;\n    }\n    generateRandomColor() {}\n    onColorPickerChange(color) {\n      this.currentColor = color;\n      // Optionally, close the color picker after selecting a color\n      this.showColorPicker = false;\n    }\n    static #_ = this.ɵfac = function GenerateColorSchemeComponent_Factory(t) {\n      return new (t || GenerateColorSchemeComponent)();\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: GenerateColorSchemeComponent,\n      selectors: [[\"app-generate-color-scheme\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 13,\n      vars: 1,\n      consts: [[1, \"color-scheme-container\"], [1, \"color-blocks\"], [1, \"color-block\"], [\"mat-raised-button\", \"\", 3, \"click\"], [3, \"selectedColor\", \"colorChange\", 4, \"ngIf\"], [3, \"colorChange\", \"selectedColor\"]],\n      template: function GenerateColorSchemeComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n          i0.ɵɵtext(2, \"Generate Theme\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"div\", 1)(4, \"div\", 2)(5, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function GenerateColorSchemeComponent_Template_button_click_5_listener() {\n            return ctx.openColorPicker();\n          });\n          i0.ɵɵtext(6, \"Select Primary Color\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(7, GenerateColorSchemeComponent_app_color_picker_7_Template, 1, 1, \"app-color-picker\", 4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"p\");\n          i0.ɵɵtext(9, \"Or\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(10, \"div\", 2)(11, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function GenerateColorSchemeComponent_Template_button_click_11_listener() {\n            return ctx.generateRandomColor();\n          });\n          i0.ɵɵtext(12, \"Generate Random\");\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngIf\", ctx.showColorPicker);\n        }\n      },\n      dependencies: [ColorSketchModule, CommonModule, i1.NgIf, ColorPickerComponent],\n      styles: [\".color-scheme-container[_ngcontent-%COMP%]{display:flex;justify-content:baseline;align-items:center;flex-direction:column;height:100vh;gap:20px}.color-blocks[_ngcontent-%COMP%]{display:flex;justify-content:top;align-items:center;flex-direction:row;margin:10px}p[_ngcontent-%COMP%]{margin:20px}button[_ngcontent-%COMP%]{background-color:transparent;border:none}.color-block[_ngcontent-%COMP%]{background-color:#ffffff1a;padding:20px;border-radius:8px;display:flex;flex-direction:column;align-items:center;width:200px}.color-preview[_ngcontent-%COMP%]{margin-top:10px;width:50px;height:50px;border:1px solid #000}\"]\n    });\n  }\n  return GenerateColorSchemeComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}