{"ast":null,"code":"import { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nfunction EditWorkbenchComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"div\")(2, \"h3\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"div\", 2);\n    i0.ɵɵelementStart(5, \"input\", 3);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function EditWorkbenchComponent_div_3_Template_input_ngModelChange_5_listener($event) {\n      const color_r2 = i0.ɵɵrestoreView(_r1).$implicit;\n      i0.ɵɵtwoWayBindingSet(color_r2.hex, $event) || (color_r2.hex = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵlistener(\"input\", function EditWorkbenchComponent_div_3_Template_input_input_5_listener() {\n      const i_r3 = i0.ɵɵrestoreView(_r1).index;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.updateColor(i_r3));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const color_r2 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(color_r2.name);\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"background-color\", color_r2.hex);\n    i0.ɵɵadvance();\n    i0.ɵɵtwoWayProperty(\"ngModel\", color_r2.hex);\n  }\n}\nexport let EditWorkbenchComponent = /*#__PURE__*/(() => {\n  class EditWorkbenchComponent {\n    constructor() {\n      this.colors = [{\n        name: 'Color 1',\n        hex: '#FF0000'\n      }, {\n        name: 'Color 2',\n        hex: '#00FF00'\n      }, {\n        name: 'Color 3',\n        hex: '#0000FF'\n      }, {\n        name: 'Color 4',\n        hex: '#FFFF00'\n      }, {\n        name: 'Color 5',\n        hex: '#FF00FF'\n      }];\n    }\n    updateColor(index) {\n      // Perform validation if needed, for example to ensure the hex is valid\n      // Example: this.colors[index].hex = this.colors[index].hex.toUpperCase();\n    }\n    saveColors() {\n      // Logic to save colors, e.g., send to a server or store locally\n      console.log('Colors saved:', this.colors);\n    }\n    static #_ = this.ɵfac = function EditWorkbenchComponent_Factory(t) {\n      return new (t || EditWorkbenchComponent)();\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: EditWorkbenchComponent,\n      selectors: [[\"app-edit-workbench\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 6,\n      vars: 1,\n      consts: [[4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [1, \"color-box\"], [\"type\", \"text\", 3, \"ngModelChange\", \"input\", \"ngModel\"]],\n      template: function EditWorkbenchComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h2\");\n          i0.ɵɵtext(1, \"Edit Workbench\");\n          i0.ɵɵelementStart(2, \"h2\");\n          i0.ɵɵtemplate(3, EditWorkbenchComponent_div_3_Template, 6, 4, \"div\", 0);\n          i0.ɵɵelementStart(4, \"button\", 1);\n          i0.ɵɵlistener(\"click\", function EditWorkbenchComponent_Template_button_click_4_listener() {\n            return ctx.saveColors();\n          });\n          i0.ɵɵtext(5, \"Save\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", ctx.colors);\n        }\n      },\n      dependencies: [FormsModule, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgModel]\n    });\n  }\n  return EditWorkbenchComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}