{"ast":null,"code":"import _asyncToGenerator from \"/home/andojas/Documents/dahu/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport * as vscode from \"vscode\";\nimport { savePreset, getPresets, getPreset } from \"./dbConnector\";\nimport { generatePalette, getColorPalleteFromImage } from \"./colorGenerator\";\nimport { applyPreset } from \"./backgroundHighlighting\";\nlet globalExtensionPath;\nlet currentDahuTheme;\nlet currentPreset;\n/**\n * Manages webview panels\n */\nlet WebPanel = /*#__PURE__*/(() => {\n  class WebPanel {\n    static #_ = this.viewType = \"angular\";\n    static createOrShow(extensionPath) {\n      const column = vscode.window.activeTextEditor ? vscode.window.activeTextEditor.viewColumn : undefined;\n      // If we already have a panel, show it.\n      // Otherwise, create angular panel.\n      if (WebPanel.currentPanel) {\n        WebPanel.currentPanel.panel.reveal(column);\n      } else {\n        WebPanel.currentPanel = new WebPanel(extensionPath, column || vscode.ViewColumn.One);\n      }\n      return WebPanel.currentPanel;\n    }\n    static updateTitle(extensionPath) {\n      const column = vscode.window.activeTextEditor ? vscode.window.activeTextEditor.viewColumn : undefined;\n      // If we already have a panel, show it.\n      // Otherwise, create angular panel.\n      if (WebPanel.currentPanel) {\n        WebPanel.currentPanel.panel.reveal(column);\n      } else {\n        WebPanel.currentPanel = new WebPanel(extensionPath, column || vscode.ViewColumn.One);\n      }\n      WebPanel.currentPanel.panel.webview.postMessage({\n        command: \"update-title\",\n        payload: {\n          title: `Hello from ${extensionPath} - ${Date().toString()}`\n        }\n      });\n    }\n    constructor(extensionPath, column) {\n      var _this = this;\n      this.disposables = [];\n      this.extensionPath = extensionPath;\n      this.builtAppFolder = \"dist\";\n      // Create and show a new webview panel\n      this.panel = vscode.window.createWebviewPanel(WebPanel.viewType, \"My Angular Webview\", column, {\n        // Enable javascript in the webview\n        enableScripts: true,\n        // And restrict the webview to only loading content from our extension's `media` directory.\n        localResourceRoots: [vscode.Uri.file(path.join(this.extensionPath, this.builtAppFolder))]\n      });\n      // Set the webview's initial html content\n      this.panel.webview.html = this._getHtmlForWebview();\n      // Listen for when the panel is disposed\n      // This happens when the user closes the panel or when the panel is closed programatically\n      this.panel.onDidDispose(() => this.dispose(), null, this.disposables);\n      // Handle messages from the webview\n      this.panel.webview.onDidReceiveMessage(message => {\n        switch (message.command) {\n          case \"notification\":\n            vscode.window.showInformationMessage(message.data.text);\n            vscode.window.showErrorMessage(message.text);\n            return;\n        }\n      }, null, this.disposables);\n      this.panel.webview.onDidReceiveMessage( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (message) {\n          switch (message.command) {\n            case 'getPresets':\n              const presets = yield getPresets(extensionPath);\n              _this.panel.webview.postMessage({\n                command: 'presets',\n                data: presets\n              });\n              break;\n            case 'savePreset':\n              try {\n                yield savePreset(message.data.name, extensionPath);\n                vscode.window.showInformationMessage('Preset saved successfully');\n              } catch (error) {\n                vscode.window.showErrorMessage('Error saving preset: ' + error.message);\n              }\n              break;\n            case 'applyPreset':\n              console.log('apply preset called');\n              yield getPreset(message.data.theme, extensionPath).then(preset => {\n                applyPreset(preset);\n                vscode.window.showInformationMessage('preset applied: ' + preset.name);\n              }).catch(error => {\n                console.log('error while applyin preset: ' + error.message);\n              });\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }(), null, this.disposables);\n    }\n    dispose() {\n      WebPanel.currentPanel = undefined;\n      // Clean up our resources\n      this.panel.dispose();\n      while (this.disposables.length) {\n        const x = this.disposables.pop();\n        if (x) {\n          x.dispose();\n        }\n      }\n    }\n    /**\n     * Returns html of the start page (index.html)\n     */\n    _getHtmlForWebview() {\n      // path to dist folder\n      const appDistPath = path.join(this.extensionPath, \"dist\");\n      const appDistPathUri = vscode.Uri.file(appDistPath);\n      // path as uri\n      const baseUri = this.panel.webview.asWebviewUri(appDistPathUri);\n      // get path to index.html file from dist folder\n      const indexPath = path.join(appDistPath, \"index.html\");\n      // read index file from file system\n      let indexHtml = fs.readFileSync(indexPath, {\n        encoding: \"utf8\"\n      });\n      // update the base URI tag\n      indexHtml = indexHtml.replace('<base href=\"/\">', `<base href=\"${String(baseUri)}/\">`);\n      return indexHtml;\n    }\n  }\n  return WebPanel;\n})();\nfunction enableTheme() {\n  const config = vscode.workspace.getConfiguration();\n  const currentTheme = config.get(\"workbench.colorTheme\");\n  config.update(\"workbench.colorTheme\", \"Dahu Theme\", vscode.ConfigurationTarget.Global);\n}\n/**\n * Activates extension\n * @param context vscode extension context\n */\nexport function activate(context) {\n  globalExtensionPath = context.extensionPath;\n  const themePath = path.join(globalExtensionPath, 'themes', 'extensionTheme.json');\n  currentDahuTheme = JSON.parse(fs.readFileSync(themePath, 'utf-8'));\n  console.log(currentDahuTheme);\n  currentPreset = {\n    id: 0,\n    name: 'inital-theme',\n    editorColor: currentDahuTheme.colors['editor.background'],\n    sidebarColor: currentDahuTheme.colors['sideBar.background'],\n    panelColor: currentDahuTheme.colors['panel.background'],\n    statusBarColor: currentDahuTheme.colors['statusBar.background'],\n    tabsColor: currentDahuTheme.colors['editorGroupHeader.tabsBackground'],\n    tokenColors: currentDahuTheme.tokenColors\n  };\n  console.log(currentPreset);\n  // console.log(\"dahu is working...\");\n  enableTheme();\n  context.subscriptions.push(vscode.commands.registerCommand(\"dahu.start-webview\", () => {\n    WebPanel.createOrShow(context.extensionPath);\n  }), vscode.commands.registerCommand(\"dahu.savePreset\", /*#__PURE__*/_asyncToGenerator(function* () {\n    const presetName = yield vscode.window.showInputBox({\n      prompt: 'enter ur preset name'\n    });\n    if (presetName) {\n      try {\n        yield savePreset(presetName, context.extensionPath);\n        console.log('preset saved successfully');\n      } catch (error) {\n        console.error('error saving preset: ' + error.message);\n      } finally {\n        console.log('finally block executed');\n      }\n    } else {\n      console.log('the name was null...');\n    }\n  })),\n  // TODO: remove the following 3 commands, these are just for debugging purposes\n  vscode.commands.registerCommand(\"dahu.showPresets\", /*#__PURE__*/_asyncToGenerator(function* () {\n    let presets;\n    let names = [];\n    try {\n      presets = yield getPresets(context.extensionPath);\n      console.log('presets:');\n      presets.forEach(p => console.log(p));\n    } catch (error) {\n      console.error('error while getting presets: ' + error.message);\n    }\n    const selected = yield vscode.window.showQuickPick(names, {\n      placeHolder: 'select a preset'\n    });\n    if (selected) {\n      vscode.window.showInformationMessage('preset selected: ' + selected);\n    }\n  })), vscode.commands.registerCommand(\"dahu.generatePalette\", /*#__PURE__*/_asyncToGenerator(function* () {\n    const hextString = yield vscode.window.showInputBox({\n      prompt: 'enter hex string'\n    });\n    let palette = [];\n    if (hextString) {\n      try {\n        palette = yield generatePalette(hextString);\n        console.log('generated palette: ');\n        palette.forEach(color => console.log(color));\n      } catch (error) {\n        console.log('ERROR OCCURED: ' + error.message);\n      }\n    }\n  })), vscode.commands.registerCommand(\"dahu.generateFromImage\", /*#__PURE__*/_asyncToGenerator(function* () {\n    const opts = {\n      canSelectMany: false,\n      openLabel: 'select an image',\n      filters: {\n        'Images': ['png', 'jpg', 'jpeg']\n      }\n    };\n    const fileUri = yield vscode.window.showOpenDialog(opts);\n    let palette = [];\n    if (fileUri && fileUri[0]) {\n      try {\n        palette = yield getColorPalleteFromImage(fileUri[0]);\n        console.log('success, color palette generated from image:');\n        palette.forEach(color => console.log(color));\n      } catch (error) {\n        console.log('ERROR OCCURED while generating color palette from image: ' + error.message);\n      }\n    }\n  })));\n}\nexport { globalExtensionPath, currentDahuTheme, currentPreset };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}