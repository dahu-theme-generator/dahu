{"ast":null,"code":"// Inspired by https://github.com/tlrobinson/long-stack-traces\nconst util = require('util');\nfunction extendTrace(object, property, pos) {\n  const old = object[property];\n  object[property] = function () {\n    const error = new Error();\n    const name = object.constructor.name + '#' + property + '(' + Array.prototype.slice.call(arguments).map(function (el) {\n      return util.inspect(el, false, 0);\n    }).join(', ') + ')';\n    if (typeof pos === 'undefined') pos = -1;\n    if (pos < 0) pos += arguments.length;\n    const cb = arguments[pos];\n    if (typeof arguments[pos] === 'function') {\n      arguments[pos] = function replacement() {\n        const err = arguments[0];\n        if (err && err.stack && !err.__augmented) {\n          err.stack = filter(err).join('\\n');\n          err.stack += '\\n--> in ' + name;\n          err.stack += '\\n' + filter(error).slice(1).join('\\n');\n          err.__augmented = true;\n        }\n        return cb.apply(this, arguments);\n      };\n    }\n    return old.apply(this, arguments);\n  };\n}\nexports.extendTrace = extendTrace;\nfunction filter(error) {\n  return error.stack.split('\\n').filter(function (line) {\n    return line.indexOf(__filename) < 0;\n  });\n}","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}