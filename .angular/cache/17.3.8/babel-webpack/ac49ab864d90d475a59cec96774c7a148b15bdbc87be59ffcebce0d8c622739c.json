{"ast":null,"code":"import _asyncToGenerator from \"/home/andojas/Documents/dahu/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as sqlite3 from 'sqlite3';\nimport * as path from 'path';\nimport * as fs from 'fs';\nsqlite3.verbose();\n// let db: sqlite3.Database;\nfunction initDB(extensionPath) {\n  const dbPath = path.join(extensionPath, 'ext-src', 'extension.db');\n  const db = new sqlite3.Database(dbPath, err => {\n    if (err) return console.log(err.message);\n    console.log('connected to the database, path: ' + dbPath);\n  });\n  db.run(`\n           CREATE TABLE IF NOT EXISTS presets (\n               id INTEGER PRIMARY KEY,\n               name TEXT NOT NULL,\n               editorColor TEXT,\n               sidebarColor TEXT,\n               panelColor TEXT,\n               statusBarColor TEXT,\n               tabsColor TEXT,\n               tokenColors TEXT\n           );\n        `);\n  return db;\n}\nfunction savePreset(name, extensionPath) {\n  return new Promise((resolve, reject) => {\n    const themePath = path.join(extensionPath, 'themes', 'extensionTheme.json');\n    if (!name) {\n      console.log('name cannot be empty while saving');\n      return;\n    }\n    try {\n      const themeData = JSON.parse(fs.readFileSync(themePath, 'utf-8'));\n      const editor = themeData.colors['editor.background'];\n      const sidebar = themeData.colors['sideBar.background'];\n      const panel = themeData.colors['panel.background'];\n      const statusBar = themeData.colors['statusBar.background'];\n      const tabs = themeData.colors['editorGroupHeader.tabsBackground'];\n      const tokenColors = JSON.stringify(themeData.tokenColors);\n      const db = initDB(extensionPath);\n      const sql = `\n                INSERT INTO presets (name, editorcolor, sidebarcolor, panelcolor, statusbarcolor, tabscolor, tokencolors) VALUES (?, ?, ?, ?, ?, ?, ?);\n            `;\n      db.run(sql, [name, editor, sidebar, panel, statusBar, tabs, tokenColors], error => {\n        closeDB(db);\n        if (error) {\n          return console.log('error while inserting preset into db: ' + error.message);\n        } else {\n          resolve();\n        }\n      });\n    } catch (error) {\n      console.log('failed to read theme data: ' + error.message);\n      reject(error);\n    }\n  });\n}\nfunction getPreset(_x, _x2) {\n  return _getPreset.apply(this, arguments);\n}\nfunction _getPreset() {\n  _getPreset = _asyncToGenerator(function* (name, extensionPath) {\n    try {\n      const db = initDB(extensionPath);\n      const sql = 'SELECT * FROM presets WHERE name = ?';\n      return yield new Promise((resolve, reject) => {\n        db.get(sql, [name], (error, row) => {\n          if (error) {\n            reject(error);\n          } else {\n            resolve(row);\n          }\n        });\n      });\n    } catch (error) {\n      console.log('error while fetching preset with name ' + name + 'from db: ' + error.message);\n      throw error;\n    }\n  });\n  return _getPreset.apply(this, arguments);\n}\nfunction getPresets(_x3) {\n  return _getPresets.apply(this, arguments);\n}\nfunction _getPresets() {\n  _getPresets = _asyncToGenerator(function* (extensionPath) {\n    try {\n      const db = initDB(extensionPath);\n      const sql = 'SELECT * FROM presets;';\n      return yield new Promise((resolve, reject) => {\n        db.all(sql, (error, rows) => {\n          closeDB(db);\n          if (error) {\n            reject(error);\n          } else {\n            resolve(rows);\n          }\n        });\n      });\n    } catch (error) {\n      console.log('error while fetching presets from the db: ' + error.message);\n      return [];\n    }\n  });\n  return _getPresets.apply(this, arguments);\n}\nfunction closeDB(db) {\n  db.close(err => {\n    if (err) {\n      console.log('error while closing database: ' + err.message);\n    } else {\n      console.log('database connection closed');\n    }\n  });\n}\nexport { initDB, closeDB, savePreset, getPresets, getPreset };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}